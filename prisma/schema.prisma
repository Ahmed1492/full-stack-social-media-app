

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id
  username String @unique
  avatar String ?
  cover String ?
  name String ?
  surname String ?
  description String ?
  city String ?
  school String ?
  work String ?
  website String ?
  createdAt DateTime @default(now())
  posts Post []
  likes Like []
  comments Comment []
  followers Follower [] @relation("UserFollowers")
  followings Follower [] @relation("UserFollowings")
  followRequestsSent FollowerRequest [] @relation("followRequestsSent")
  followRequestsReceived FollowerRequest [] @relation("followRequestsReceived")
  blocks Block [] @relation("blocksSent")
  blockedBy Block [] @relation("blocksReceived")
  stories Story []

}

model Post {
  id Int @id @default(autoincrement())
  description String
  img String ?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId] , references: [id], onDelete: Cascade)
  userId String
  likes Like []
  comments Comment []

}


model Comment {
  id Int @id @default(autoincrement())
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId] , references: [id], onDelete: Cascade)
  userId String
  post Post @relation(fields: [commentId] , references: [id], onDelete: Cascade)
  commentId Int
  likes Like[]
  
}

model Like{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  user User @relation(fields: [userId] , references: [id], onDelete: Cascade)
  userId String
  post Post? @relation(fields: [postId] , references: [id], onDelete: Cascade)
  postId Int?
  comment Comment? @relation( fields: [commentId] , references: [id] , onDelete: Cascade)
  commentId Int?
}

model Follower{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  follower User @relation("UserFollowers",fields: [followerId] , references: [id], onDelete: Cascade)
  followerId String
  following User @relation("UserFollowings",fields: [followingId] , references: [id], onDelete: Cascade)
  followingId String
}

model FollowerRequest{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  sender User @relation("followRequestsSent",fields: [senderId] , references: [id], onDelete: Cascade)
  senderId String
  receiver User @relation("followRequestsReceived",fields: [receiverId] , references: [id], onDelete: Cascade)
  receiverId String
  // Prevent Muiltiple Following Request
  @@unique([senderId , receiverId])

}


model Block{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  bloker User @relation("blocksSent",fields: [blockerId] , references: [id], onDelete: Cascade)
  blockerId String
  bloked User @relation("blocksReceived",fields: [blockedId] , references: [id], onDelete: Cascade)
  blockedId String
  // Prevent Muiltiple Following Request
  @@unique([blockerId , blockedId])

}

model Story{
  id Int @id @default(autoincrement())
  img String?
  createdAt DateTime @default(now())
  expirseAt DateTime
  user User @relation(fields: [userId] , references: [id], onDelete: Cascade)
  userId String @unique


}